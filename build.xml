<?xml version="1.0" encoding="UTF-8"?>
<project name="ITSecLargeLab1" default="run_app" basedir="">

	<description>Development-Version der build.xml</description>

	<!-- Variablen setzen -->
	<target name="init" description="Initialize environment">
		<property name="path.app.src" value="application/src"/>
		<property name="path.test.src" value="testbench/src"/>
		<property name="path.app.build" value="application/build"/>
		<property name="path.test.build" value="testbench/build"/>
		<property name="path.lib" value="lib"/>
		<property name="database.file" value="database/cards.db"/>

		<path id="classpath">
			<fileset dir="${path.lib}">
				<include name="*.jar"/>
			</fileset>
		</path>

		<path id="classpath.runtime">
			<fileset dir="${path.lib}">
				<include name="*.jar"/>
			</fileset>
			<dirset dir="${path.app.build}"/>
			<dirset dir="${path.test.build}"/>
		</path>
	</target>

	<!-- Verzeichnisse erzeugen -->
	<target name="mkdirs" description="Creates all project directories" depends="init">
		<mkdir dir="${path.app.build}"/>
		<mkdir dir="${path.test.build}"/>
		<mkdir dir="${path.app.src}"/>
		<mkdir dir="${path.test.src}"/>
	</target>

	<!-- Server starten -->
	<target name="run_app" depends="init, build">
		<java classname="at.ac.tuwien.esse.itseclarge.lab1.CardServer" fork="true" classpathref="classpath.runtime">
			<!--<jvmarg value="-Djavax.net.debug=all"/>-->
		</java>
	</target>

	<!-- Unit-Tests ausf端hren -->
	<target name="run_test" depends="init, build">
		<junit>
			<classpath refid="classpath.runtime"/>
			<!--<jvmarg value="-Djavax.net.debug=all"/>-->
			<jvmarg value="-Djavax.net.ssl.trustStore=keystore/truststore.jks"/>
			<test name="at.ac.tuwien.esse.itseclarge.lab1.test.TestKundenverwaltungClient" fork="true">
				<formatter type="brief" usefile="false"/>
			</test>
			<test name="at.ac.tuwien.esse.itseclarge.lab1.test.TestTransaktionverwaltungClient" fork="true">
				<formatter type="brief" usefile="false"/>
			</test>
		</junit>
	</target>
	
	<!-- Alles kompilieren -->
	<target name="build" depends="init, mkdirs">
		<javac destdir="${path.app.build}" srcdir="${path.app.src}" includeantruntime="false">
			<classpath refid="classpath"/>
		</javac>
		<javac destdir="${path.test.build}" srcdir="${path.test.src}" includeantruntime="false">
			<classpath refid="classpath.runtime"/>
		</javac>
	</target>

	<!-- Mitarbeiter-Schl端ssel f端r die Signaturen erzeugen -->
	<target name="make_staffkey" depends="init, build">
		<java classname="at.ac.tuwien.esse.itseclarge.lab1.test.StaffKeyGenerator" fork="true" classpathref="classpath.runtime">
		</java>
	</target>
	
	<!-- Abgabedokument 端bersetzen -->
	<target name="report">
		<exec executable="pdflatex" dir="report" failonerror="true">
			<arg value="protokoll.tex"/>
		</exec>
	</target>
	
	<!-- Server + Testbench zippen -->
	<target name="zip_app" depends="init, clean_app, clean_test">
		<zip destfile="lab1d_11.zip">
			<zipfileset dir="${path.app.src}" prefix="11/${path.app.src}"/>
			<zipfileset dir="${path.test.src}" prefix="11/${path.test.src}"/>
			<zipfileset dir="database" prefix="11/database"/>
			<zipfileset dir="keystore" prefix="11/keystore"/>
			<zipfileset dir="${path.lib}" prefix="11/${path.lib}"/>
			<zipfileset dir="." includes="build-minimal.xml" fullpath="11/build.xml"/>
			<zipfileset dir="." includes="README.md" fullpath="11/README"/>
		</zip>
	</target>
	
	<!-- Abgabearchiv zippen -->
	<target name="zip" depends="init, report, zip_app">
		<zip destfile="lab1_11.zip">
			<zipfileset dir="report" includes="protokoll.pdf" fullpath="lab1_11.pdf"/>
			<zipfileset dir="." includes="lab1d_11.zip" fullpath="lab1d_11.zip"/>
		</zip>
		<delete file="lab1d_11.zip"/>
	</target>

	<!-- Server-Build cleanen -->
	<target name="clean_app" depends="init">
		<delete dir="${path.app.build}"/>
		<delete file="${database.file}"/>
	</target>

	<!-- Testbench cleanen -->
	<target name="clean_test" depends="init">
		<delete dir="${path.test.build}"/>
		<delete file="${database.file}"/>
	</target>
	
	<!-- Sonstiges Zeug cleanen -->
	<target name="clean_etc" depends="init">
		<delete file="report/protokoll.log"/>
		<delete file="report/protokoll.toc"/>
		<delete file="report/protokoll.out"/>
		<delete file="report/protokoll.aux"/>
		<delete file="report/protokoll.pdf"/>
		<delete file="lab1_11.zip"/>
		<delete file="lab1d_11.zip"/>
	</target>

	<!-- Alles cleanen -->
	<target name="clean" depends="clean_app, clean_test, clean_etc"/>
</project>
